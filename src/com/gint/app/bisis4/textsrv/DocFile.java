package com.gint.app.bisis4.textsrv;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class DocFile implements Serializable{

  public DocFile() {
  }

  public DocFile(int id, int rn, String filename, String contentType, 
      String uploader) {
    this.id = id;
    this.rn = rn;
    this.filename = filename;
    this.contentType = contentType;
    this.uploader = uploader;
  }

  public static DocFile load(Connection conn, int id) {
    try {
      Statement stmt = conn.createStatement();
      ResultSet rset = stmt.executeQuery(
          "SELECT rn, filename, content_type, uploader FROM file_storage " +
          "WHERE file_id=" + id);
      DocFile docFile = null;
      if (rset.next()) {
        int rn = rset.getInt(1);
        String filename = rset.getString(2);
        String contentType = rset.getString(3);
        String uploader = rset.getString(4);
        docFile = new DocFile(id, rn, filename, contentType, uploader);
      } else {
        log.warn("File with id="+id+" not found in database.");
      }
      rset.close();
      stmt.close();
      return docFile;
    } catch (SQLException ex) {
      log.fatal(ex);
      return null;
    }
  }
  
  public static List<DocFile> find(Connection conn, int rn) {  	
    List<DocFile> retVal = new ArrayList<DocFile>();
    try {
      Statement stmt = conn.createStatement();
      ResultSet rset = stmt.executeQuery(
          "SELECT file_id, filename, content_type, uploader FROM file_storage "+
          "WHERE rn=" + rn);
      while (rset.next()) {
        int id = rset.getInt(1);
        String filename = rset.getString(2);
        String contentType = rset.getString(3);
        String uploader = rset.getString(4);
        retVal.add(new DocFile(id, rn, filename, contentType, uploader));        
      }
      rset.close();
      stmt.close();
    } catch (SQLException ex) {    		
      log.fatal(ex);
    }
    return retVal;
  }
  
  public void store(Connection conn) {
    try {
      PreparedStatement stmt = conn.prepareStatement(
          "INSERT INTO file_storage (rn, filename, content_type, uploader) " +
          "VALUES (?, ?, ?, ?)",
          new String[] { "file_id" });
      stmt.setInt(1, rn);
      stmt.setString(2, filename);
      stmt.setString(3, contentType);
      stmt.setString(4, uploader);
      stmt.executeUpdate();      
      ResultSet rset = stmt.getGeneratedKeys();
      if (rset.next()) {
        id = rset.getInt(1);
      } else {
        log.fatal("Unable to fetch autogenerated key for " + this);
      }
      rset.close();
      stmt.close();
    } catch (SQLException ex) {
      log.fatal(ex);
    }
  }
  
  public void update(Connection conn) {
    try {
      PreparedStatement stmt = conn.prepareStatement(
          "UPDATE file_storage SET rn=?,filename=?,content_type=?,uploader=? " +
          "WHERE file_id=?");
      stmt.setInt(1, rn);
      stmt.setString(2, filename);
      stmt.setString(3, contentType);
      stmt.setString(4, uploader);
      stmt.setInt(5, id);
      stmt.executeUpdate();      
      stmt.close();
    } catch (SQLException ex) {
      log.fatal(ex);
    }
  }
  
  public boolean delete(Connection conn){
  	try{
  		Statement stmt = conn.createStatement();
  		int deletedRowsNum = stmt.executeUpdate("DELETE FROM file_storage WHERE file_id="+id);
  		if(deletedRowsNum==0){
  			return false;
  		}  	
  		stmt.close();
  		return true;
  	}catch(SQLException ex){
  		log.fatal(ex);
  		return false;
  	}
  	
  }

  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public int getRn() {
    return rn;
  }

  public void setRn(int rn) {
    this.rn = rn;
  }

  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public int getId() {
    return id;
  }

  public void setId(int id) {
    this.id = id;
  }
  
  public String getUploader() {
    return uploader;
  }

  public void setUploader(String uploader) {
    this.uploader = uploader;
  }

  public String toString() {
    return "DocFile[id=" + id + ",rn=" + rn + ",filename=" + filename
        + ",contentType=" + contentType + ",uploader=" + uploader + "]";
  }

  private int id;
  private int rn;
  private String filename;
  private String contentType;
  private String uploader;
  private static Log log = LogFactory.getLog(DocFile.class);

}
